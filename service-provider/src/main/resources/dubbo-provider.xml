<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd">

    <!-- 提供方应用信息，用于计算依赖关系 -->
    <dubbo:application name="hello-service"  />

    <!-- 注册中心服务地址 -->
    <dubbo:registry id="zookeeper" protocol="zookeeper" address="${dubbo.registry.address}" />

    <!--当前服务发布所依赖的协议 支持 dubbo webserovice、Thrift、Hessain、http-->
    <!-- 用dubbo协议在20880 -->
    <!-- 本机需要配置host  不配置host的话不通 mac实测        -->
    <dubbo:protocol name="dubbo" port="30001" host="dubbo-provider.lilixin.top"/>

    <!-- 声明需要暴露的服务接口 -->
    <dubbo:service interface="top.lilixin.dubbo.DubboInterface" ref="dubboService"
                   version="1.0" registry="zookeeper"/>

    <!-- 具体服务接口的实现 -->
    <bean id="dubboService" class="top.lilixin.provider.service.DubboProviderService" />


<!--
① 上面的文件其实就是类似 spring 的配置文件，而且，dubbo 底层就是 spring。
② 节点：dubbo:application
就是整个项目在分布式架构中的唯一名称，可以在 name 属性中配置，另外还可以配置 owner 字段，表示属于谁。
下面的参数是可以不配置的，这里配置是因为出现了端口的冲突，所以配置。
③ 节点：dubbo:monitor
监控中心配置， 用于配置连接监控中心相关信息，可以不配置，不是必须的参数。
④ 节点：dubbo:registry
配置注册中心的信息，比如，这里我们可以配置 zookeeper 作为我们的注册中心。address 是注册中心的地址，这里我们配置的是 N/A 表示由 dubbo 自动分配地址。或者说是一种直连的方式，不通过注册中心。
⑤ 节点：dubbo:protocol
服务发布的时候 dubbo 依赖什么协议，可以配置 dubbo、webserovice、Thrift、Hessain、http等协议。
⑥ 节点：dubbo:service
这个节点就是我们的重点了，当我们服务发布的时候，我们就是通过这个配置将我们的服务发布出去的。interface 是接口的包路径，ref 是第 ⑦ 点配置的接口的 bean。
⑦ 最后，我们需要像配置 spring 的接口一样，配置接口的 bean。

-->

</beans>